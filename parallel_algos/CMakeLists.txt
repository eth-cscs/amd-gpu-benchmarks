cmake_minimum_required(VERSION 3.29)
project(parallel-algos-benchmarks CXX)

set(CMAKE_CXX_STANDARD 20)

include(CheckLanguage)

set(default_build_type "Release")
if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

option(WITH_CUDA "Enable building for NVIDIA GPUs" ON)
option(WITH_HIP "Enable building for AMD GPUs" ON)

if(WITH_CUDA)
    check_language(CUDA)
    if(CMAKE_CUDA_COMPILER)
        enable_language(CUDA)
        find_package(CUDAToolkit)
        set(CMAKE_CUDA_STANDARD 20)
    else()
        message(STATUS "No CUDA support")
        set(WITH_CUDA OFF)
    endif()
endif()

if(WITH_HIP)
    check_language(HIP)
    if(CMAKE_HIP_COMPILER)
        enable_language(HIP)
        find_package(hip)
        set(CMAKE_HIP_STANDARD 20)
    else()
        message(STATUS "No HIP support")
        set(WITH_HIP OFF)
    endif()
endif()

if(WITH_HIP AND WITH_CUDA)
    message(FATAL_ERROR "CUDA and HIP cannot both be turned on")
endif()

function(add_test testname sourcename)
    add_executable(${testname} ${sourcename})
    if (CMAKE_HIP_COMPILER)
        set_source_files_properties(${sourcename} PROPERTIES LANGUAGE HIP)
        target_link_libraries(${testname} PRIVATE hip::host)
    endif ()
endfunction()

add_test(radix-sort radix-sort.cu)
add_test(scan scan.cu)
add_test(reduce reduce.cu)
